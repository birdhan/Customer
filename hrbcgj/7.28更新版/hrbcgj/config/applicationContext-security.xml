<?xml version="1.0" encoding="UTF-8"?>
<b:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:b="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans           
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd      
	http://www.springframework.org/schema/security       
	http://www.springframework.org/schema/security/spring-security-3.1.xsd">
	
	<!-- 忽略拦截的地址 -->
	<http security="none" pattern="/**/*.jpg"/>
	<http security="none" pattern="/**/*.png"/>
	<http security="none" pattern="/**/*.gif"/>
	<http security="none" pattern="/**/*.css"/>
	<http security="none" pattern="/**/*.js"/>
	<http security="none" pattern="/login.jsp"/>
	
	<http auto-config="true" use-expressions="true" access-denied-page="/accessDenied.jsp">                  
		<form-login login-page="/login.jsp"
			authentication-failure-url="/portal/portalAction!loginError.do"
			default-target-url="/portal/portalAction!loginSuccess.do" />                  
		<!-- authentication-success-handler-ref="myAuthenticationDispatcher" -->                   
		<!-- "记住我"功能，采用持久化策略（将用户的登录信息存放在数据库表中） -->
		<remember-me data-source-ref="dataSource" />                  
		<!-- 检测失效的sessionId,超时时定位到另外一个URL -->
		<session-management invalid-session-url="/login.jsp" />                  
		<!-- 增加一个自定义的filter，放在FILTER_SECURITY_INTERCEPTOR之前， 实现用户、角色、权限、资源的数据库管理。 11/3/23 -->
		<custom-filter before="FILTER_SECURITY_INTERCEPTOR" ref="myFilter" />
	</http>
	                    
	<!-- 一个自定义的filter，必须包含authenticationManager,accessDecisionManager,securityMetadataSource三个属性。 -->
	<b:bean id="myFilter" class="com.cloud.base.security.MyFilterSecurityInterceptor">
		<b:property name="authenticationManager" ref="authenticationManager" />
		<b:property name="accessDecisionManager" ref="myAccessDecisionManagerBean" />
		<b:property name="securityMetadataSource" ref="securityMetadataSource" />
	</b:bean>

	<!-- 认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 -->
	<authentication-manager alias="authenticationManager">
		<authentication-provider user-service-ref="myUserDetailService">
			<!-- 如果用户的密码采用加密的话，可以加点“盐” <password-encoder hash="md5" /> -->
		</authentication-provider>
	</authentication-manager>
	<b:bean id="myUserDetailService" class="com.cloud.base.security.MyUserDetailService" />

	<!-- 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
	<b:bean id="myAccessDecisionManagerBean" class="com.cloud.base.security.MyAccessDecisionManager"/>

	<!-- 资源源数据定义，即定义某一资源可以被哪些角色访问 -->
	<b:bean id="securityMetadataSource" class="com.cloud.base.security.MyInvocationSecurityMetadataSource"/>
</b:beans>    
